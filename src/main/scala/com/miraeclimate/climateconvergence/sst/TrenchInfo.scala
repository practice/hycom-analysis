package com.miraeclimate.climateconvergence.sst

/**
 * Created by shawn on 14. 11. 18..
 */
object TrenchInfo {
  val rawData = """x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	8147	8148	8149	8150
                  |x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	8140	8141	8142	8143	8144
                  |x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	8132	8133	8134	8135	8136	8137
                  |x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	8123	8124	8125	8126	8127	8128	8129
                  |x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	8113	8114	8115	8116	8117	8118	8119	8120
                  |x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	8300	8301	8302	x	x	x	8101	8102	8103	8104	8105	8106	8107	8108	8109	8110
                  |x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	8303	8304	1	302	303	304	305	1004	1005	1006	1007	1008	1009	1010	1011	1237	1238
                  |x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	2	3	4	5	306	307	308	309	996	997	998	999	1000	1001	1002	1003	1247	1248
                  |x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	6	7	8	9	10	310	311	312	313	988	989	990	991	992	993	994	995	1261	1262
                  |x	x	x	x	x	6003	x	x	x	x	x	x	x	x	x	x	x	x	x	x	x	11	12	13	14	15	314	315	316	317	980	981	982	983	984	985	986	987	1275	1276
                  |x	x	x	6901	6902	6903	6904	x	x	x	x	x	x	x	x	x	x	x	x	x	16	17	18	19	20	21	318	319	320	321	972	973	974	975	976	977	978	979	1289	1290
                  |x	6005	6905	6906	6907	6908	6909	x	x	x	x	x	x	x	x	x	x	5021	5022	22	23	24	25	26	27	28	322	323	324	325	964	965	966	967	968	969	970	971	1303	1304
                  |6910	6911	6912	6913	6914	6915	x	6116	116	117	118	5118	5124	x	x	x	5029	29	30	31	32	33	34	35	36	37	326	327	328	329	956	957	958	959	960	961	962	963	1314	1315
                  |6918	6919	6920	6921	6922	6923	6119	119	120	121	122	123	124	x	x	x	5038	38	39	40	41	42	43	44	45	46	330	331	332	333	948	949	950	951	952	953	954	955	1325	1326
                  |6928	6929	6930	6931	6932	6933	125	126	127	128	129	130	5130	5131	x	x	x	5047	47	48	49	50	51	52	53	54	334	335	336	337	940	941	942	943	944	945	946	947	1336	1337
                  |6937	6938	6939	6940	6941	131	132	133	134	135	136	137	5137	5138	x	x	x	x	5055	55	56	57	58	59	60	61	338	339	340	341	932	933	934	935	936	937	938	939	1347	1348
                  |6943	6944	6945	6946	6947	138	139	140	141	142	143	144	145	146	5146	5147	x	x	x	62	63	64	65	66	67	68	342	343	344	345	924	925	926	927	928	929	930	931	1358	1359
                  |6948	6949	6950	x	6137	6138	6139	147	148	149	150	151	152	153	154	5154	x	x	x	x	69	70	71	72	73	74	346	347	348	349	916	917	918	919	920	921	922	923	1368	x
                  |x	x	x	6154	6155	155	156	157	158	159	160	161	162	163	164	5164	x	x	x	x	75	76	77	78	79	80	350	351	352	353	910	911	912	913	914	915	7922	7923	x	x
                  |x	x	6951	6952	6953	165	166	167	168	169	170	171	172	173	174	5174	x	x	x	x	81	82	83	84	85	86	354	355	356	357	905	906	907	908	909	x	x	x	x	x
                  |x	6954	6955	6956	6957	175	176	177	178	179	180	181	182	183	184	5184	x	x	x	x	5087	87	88	89	90	91	358	359	360	361	901	902	903	904	7904	x	x	x	x	x
                  |6058	6958	6959	6960	6961	185	186	187	188	189	190	191	192	193	194	x	x	5097	5098	5099	92	93	94	95	96	362	363	7363	7360	7361	x	x	x	x	x	7388	x	x	x	7434
                  |6062	6962	6963	6964	6965	195	196	197	198	199	200	201	202	203	204	5213	5214	97	98	99	100	101	102	103	365	366	7366	x	x	384	385	386	387	x	x	388	389	x390	x7432	7433
                  |x	6066	6966	6967	6968	401	402	205	206	207	208	209	210	211	212	213	214	104	105	106	107	108	109	367	7367	390	391	392	393	394	395	396	397	x	398	399	400	409	1432	1433
                  |x	x	6969	6970	6971	403	404	215	216	217	218	219	220	221	222	223	224	110	111	112	368	369	370	7370	411	412	413	414	7413	7414	7415	415	416	7426	417	418	419	420	1446	1447
                  |x	x	x	6972	6973	405	406	225	226	227	228	229	230	231	232	233	234	113	114	371	372	7372	7373	x	x	7420	421	7421	7422	422	423	424	425	426	427	428	429	430	1460	1461
                  |x	x	x	6974	6975	6976	407	235	236	237	238	239	240	241	242	243	244	115	374	375	376	377	7377	7378	x	7432	432	433	434	435	436	437	438	439	440	441	442	443	1474	1475
                  |x	x	6076	6077	6977	6978	408	245	246	247	248	249	250	251	252	253	254	378	379	380	381	382	7382	7383	x	444	445	446	447	448	449	450	451	452	453	454	455	456	1488	1489
                  |x	x	6454	6455	6456	6457	457	458	459	460	461	462	463	464	465	466	467	468	469	470	471	472	7472	7473	7474	474	475	476	477	478	479	480	481	482	483	484	485	486	1502	1503
                  |x	x	x	x	6486	6487	487	488	489	490	491	492	493	494	495	496	497	498	499	500	501	502	503	504	505	506	507	x	x	x	x	x	x	x	x	x	x	x	1516	1517
                  |x	x	x	x	601	602	519	520	521	522	523	524	525	526	527	528	529	530	531	532	533	534	535	536	537	538	x	x	x	x	x	x	x	x	x	x	x	x	1530	1531
                  |x	x	6602	6603	603	604	551	552	553	554	555	556	557	558	559	560	561	562	563	564	565	566	567	568	569	570	x	x	x	x	x	x	x	x	x	x	x	x	1544	1545
                  |x	x	x	x	6604	6605	605	606	607	608	609	610	701	702	703	704	705	706	707	708	709	710	801	802	803	804	x	x	x	x	x	x	x	x	x	x	x	x	1558	1559
                  |x	x	x	x	6614	6615	615	616	617	618	619	620	711	712	713	714	715	716	717	718	719	720	811	812	813	814	x	x	x	x	x	x	x	x	x	x	x	x	1572	1573
                  |x	x	x	x	6624	624	625	626	627	628	629	630	721	722	723	724	725	726	727	728	729	730	821	822	823	824	825	x	x	x	x	x	x	x	x	x	x	x	1586	1587
                  |x	x	x	6642	633	634	635	636	637	638	639	640	731	732	733	734	735	736	737	738	739	740	831	832	833	834	835	836	837	838	839	840	x	x	x	x	262	263	1600	1601
                  |x	x	x	642	643	644	645	646	647	648	649	650	741	742	743	744	745	746	747	748	749	750	841	842	843	844	845	846	847	848	849	850	264	265	266	267	268	269	1614	1615
                  |x	x	651	652	653	654	655	656	657	658	659	660	751	752	753	754	755	756	757	758	759	760	851	852	853	854	855	856	857	858	859	860	270	271	272	273	274	275	1628	1629
                  |x	6660	661	662	663	664	665	666	667	668	669	670	761	762	763	764	765	766	767	768	769	770	861	862	863	864	865	866	867	868	869	870	276	277	278	279	280	281	1642	1643
                  |x	6670	671	672	673	674	675	676	677	678	679	680	771	772	773	774	775	776	777	778	779	780	871	872	873	874	875	876	877	878	879	880	282	283	284	285	286	287	1656	1657
                  |6680	6681	681	682	683	684	685	686	687	688	689	690	781	782	783	784	785	786	787	788	789	790	881	882	883	884	885	886	887	888	889	890	288	289	290	291	292	293	1670	1671
                  |6690	6691	691	692	693	694	695	696	697	698	699	700	791	792	793	794	795	796	797	798	799	800	891	892	893	894	895	896	897	898	899	900	294	295	296	297	298	299	1684	1685""".stripMargin

  val latRaw = """45.5
              |45
              |44.5
              |44
              |43.5
              |43
              |42.5
              |42
              |41.5
              |41
              |40.5
              |40
              |39.5
              |39
              |38.5
              |38
              |37.5
              |37
              |36.5
              |36
              |35.5
              |35
              |34.5
              |34
              |33.5
              |33
              |32.5
              |32
              |31.5
              |31
              |30.5
              |30
              |29.5
              |29
              |28.5
              |28
              |27.5
              |27
              |26.5
              |26
              |25.5
              |25""".stripMargin
  val lngRaw = """119	119.5	120	120.5	121	121.5	122	122.5	123	123.5	124	124.5	125	125.5	126	126.5	127	127.5	128	128.5	129	129.5	130	130.5	131	131.5	132	132.5	133	133.5	134	134.5	135	135.5	136	136.5	137	137.5	138	138.5"""

  def build: List[SeaTrench] = {
    val lats = latRaw.split('\n').map(_.toFloat)
    val lngs = lngRaw.split("""\s+""").map(_.toFloat)
//    Util.printAll(lats)
//    Util.printAll(lngs)

    val trenchIds = rawData.split('\n').toList.map(_.split("""\s+""").toList).flatten

    // find duplicates
    val dup = trenchIds.filter(_(0) != 'x').groupBy(identity).collect { case (x, List(_,_,_*)) => x }.toList // see http://stackoverflow.com/questions/24729544/scala-find-duplicate-elements-in-a-list
    if (dup.length > 0) {
      println("duplicates found: ")
      Util.printAll(dup)
      System.exit(1)
    }
    println("trench id count=" + trenchIds.length)

    // Util.printAll(trenchIds)
    val positions = for (lat <- lats; lng <- lngs) yield (lat, lng)

    println("position count=" + positions.length)
    if (trenchIds.length != positions.length) {
      println("trench count and (lat,lng) count do not match !")
      System.exit(1)
    }
    trenchIds.zip(positions).filter(_._1(0) != 'x').map{ case (tid,(lat,lng)) => new SeaTrench(tid.toInt,lat,lng) }
  }


}
